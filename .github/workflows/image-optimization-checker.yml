name: 画像圧縮チェッカー

on:
  pull_request:
    types: [opened, synchronize]

permissions:
  contents: read
  pull-requests: write

jobs:
  check-image-optimization:
    name: 画像の最適化チェック
    runs-on: ubuntu-latest

    steps:
      - name: リポジトリのチェックアウト
        uses: actions/checkout@v3
        with:
          fetch-depth: 0  # すべての履歴を取得して差分の確認に使用

      - name: 画像圧縮PRのチェック
        id: check-pr
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const { data: openPRs } = await github.rest.pulls.list({
              owner: context.repo.owner,
              repo: context.repo.repo,
              state: 'open',
              base: context.payload.pull_request.base.ref
            });

            const hasImageOptimizationPR = openPRs.some(pr =>
              pr.title.includes('画像圧縮') && pr.number !== context.issue.number
            );

            if (hasImageOptimizationPR) {
              console.log('同じbaseブランチに画像圧縮用のPRが存在するため、チェックをスキップします。');
              process.exit(0);
            }

      - name: 必要なツールのインストール
        run: |
          sudo apt-get update
          sudo apt-get install -y jpegoptim pngquant

      - name: PRで変更された画像ファイルの取得
        id: changed-files
        run: |
          # PRの差分から画像ファイルのリストを作成
          BASE_SHA=${{ github.event.pull_request.base.sha }}
          HEAD_SHA=${{ github.event.pull_request.head.sha }}

          CHANGED_IMAGES=$(git diff --name-only $BASE_SHA $HEAD_SHA | grep -E '\.jpe?g$|\.png$' || true)

          if [ -z "$CHANGED_IMAGES" ]; then
            echo "変更された画像ファイルはありません。"
            echo "has_images=false" >> $GITHUB_OUTPUT
          else
            echo "変更された画像ファイル: $CHANGED_IMAGES"
            echo "$CHANGED_IMAGES" > changed_images.txt
            echo "has_images=true" >> $GITHUB_OUTPUT
          fi

      - name: 画像圧縮チェック
        if: steps.changed-files.outputs.has_images == 'true'
        id: compression-check
        run: |
          echo "| ファイル | 現在のサイズ | 圧縮後のサイズ | 削減率 |" > report.md
          echo "|---------|------------|--------------|-------|" >> report.md

          FOUND_ISSUE=false

          while IFS= read -r file; do
            if [[ -f "$file" ]]; then
              # 元のファイルサイズを取得
              ORIGINAL_SIZE=$(stat -c%s "$file")
              ORIGINAL_SIZE_HUMAN=$(numfmt --to=iec --suffix=B $ORIGINAL_SIZE)

              # ファイルタイプに基づいて圧縮を実行
              if [[ "$file" =~ \.jpe?g$ ]]; then
                # JPEGファイルの圧縮
                cp "$file" "${file}.tmp"
                jpegoptim --max=80 --strip-all "${file}.tmp" --stdout > "/tmp/compressed.jpg"
                COMPRESSED_SIZE=$(stat -c%s "/tmp/compressed.jpg")
              elif [[ "$file" =~ \.png$ ]]; then
                # PNGファイルの圧縮
                pngquant --quality=65-80 "$file" --output "/tmp/compressed.png" --force
                COMPRESSED_SIZE=$(stat -c%s "/tmp/compressed.png")
              fi

              COMPRESSED_SIZE_HUMAN=$(numfmt --to=iec --suffix=B $COMPRESSED_SIZE)

              # 削減率の計算 (%)
              REDUCTION=$(awk "BEGIN {print 100 - ($COMPRESSED_SIZE / $ORIGINAL_SIZE * 100)}")
              REDUCTION_ROUNDED=$(printf "%.1f" $REDUCTION)

              echo "ファイル: $file"
              echo "元のサイズ: $ORIGINAL_SIZE_HUMAN"
              echo "圧縮後のサイズ: $COMPRESSED_SIZE_HUMAN"
              echo "削減率: $REDUCTION_ROUNDED%"

              # 元のサイズの70%以下になる場合はフラグを立てる
              if (( $(echo "$REDUCTION > 30" | bc -l) )); then
                echo "| $file | $ORIGINAL_SIZE_HUMAN | $COMPRESSED_SIZE_HUMAN | $REDUCTION_ROUNDED% |" >> report.md
                FOUND_ISSUE=true
              fi

              # 一時ファイルの削除
              rm -f "${file}.tmp" "/tmp/compressed.jpg" "/tmp/compressed.png"
            fi
          done < changed_images.txt

          if [ "$FOUND_ISSUE" = true ]; then
            # 圧縮可能な画像があるためCIをフェイルにする
            echo "optimization_required=true" >> $GITHUB_OUTPUT

            # レポートの完成
            {
              echo "## 画像圧縮の最適化が必要です 🖼️"
              echo ""
              echo "以下の画像ファイルは、圧縮によって大幅にサイズを削減できます:"
              echo ""
              cat report.md
              echo ""
              echo "### ローカルで圧縮するには:"
              echo ""
              echo "JPEGファイルの場合:"
              echo '```bash'
              echo "jpegoptim --max=80 --strip-all path/to/image.jpg"
              echo '```'
              echo ""
              echo "PNGファイルの場合:"
              echo '```bash'
              echo "pngquant --quality=65-80 path/to/image.png --output path/to/image-compressed.png"
              echo '```'
              echo ""
              echo "最適化された画像を追加してPRを更新してください。"
            } > comment.md

          else
            echo "optimization_required=false" >> $GITHUB_OUTPUT
            echo "圧縮が必要な画像は見つかりませんでした。"
          fi

      - name: PRにコメントを追加
        if: steps.compression-check.outputs.optimization_required == 'true'
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const fs = require('fs');
            const comment = fs.readFileSync('comment.md', 'utf8');

            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: comment
            });

      - name: ワークフローの状態を設定
        if: steps.compression-check.outputs.optimization_required == 'true'
        run: exit 1
